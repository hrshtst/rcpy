[build-system]
requires = ["hatchling", "hatch-vcs"]
build-backend = "hatchling.build"

[project]
name = "rebasicspy"
dynamic = ["version"]
description = "A simple implementation of reBASICS in Python"
authors = [
    {name = "Hiroshi Atsuta", email = "atsuta@ieee.org"},
]
maintainers = [
    { name = "Hiroshi Atsuta", email = "atsuta@ieee.org" },
]
dependencies = [
    "numpy>=1.25.1",
    "scipy>=1.11.2",
]
requires-python = ">=3.10,<3.13"
readme = "README.md"
license = {text = "MIT"}
keywords = []
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering",
    "Topic :: Software Development",
    "Topic :: Utilities",
    "Typing :: Typed",
]

[project.urls]
Homepage = "https://github.com/hrshtst/rebasicspy"
Repository = "https://github.com/hrshtst/rebasicspy"
Issues = "https://github.com/hrshtst/rebasicspy/issues"
Discussions = "https://github.com/hrshtst/rebasicspy/discussions"

[tool.rye]
managed = true
dev-dependencies = [
    "pytest>=8.3.2",
    "pytest-cov>=5.0.0",
    "pytest-randomly>=3.15.0",
    "pytest-xdist>=3.6.1",
    "mypy>=1.11.1",
    "nox>=2024.4.15",
    "ruff>=0.5.6",
]

[tool.hatch.metadata]
allow-direct-references = true

[tool.hatch.version]
source = "vcs"

[tool.hatch.build.targets.wheel]
packages = ["src/rebasicspy"]

[tool.ruff]
# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
]

# Same as Black.
line-length = 120
indent-width = 4

# Assume Python 3.10
target-version = "py310"

[tool.ruff.lint]
# Enable Pyflakes (`F`) and a subset of the pycodestyle (`E`)  codes by default.
# Unlike Flake8, Ruff doesn't enable pycodestyle warnings (`W`) or
# McCabe complexity (`C901`) by default.
# select = ["E4", "E7", "E9", "F"]
select = ["ALL"]
ignore = [
  "D1",                         # Ignore missing docstring (remove in future)
  "N802",                       # Ignore function names that do not follow 'snake_case'
  "N803",                       # Ignore argument names that do not follow 'snake_case'
  "N806",                       # Ignore variable names with non-lowercase
  "N815",                       # Ignore class variable names that follow 'mixedCase'
  "PLR0913",                    # Ignore many arguments in function definition
  "SIM108",                     # Ignore using ternary operator {contents} instead of if-else-block
  "S101",                       # Ignore detection of using assert
]

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = [
  "SIM105",                     # Avoid inadvertently fix try-except-pass clause
]

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.lint.pydocstyle]
# Use Numpy-style docstrings.
convention = "numpy"

[tool.ruff.lint.isort]
# Always add import annotations
required-imports = ["from __future__ import annotations"]

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

# Enable auto-formatting of code examples in docstrings. Markdown,
# reStructuredText code/literal blocks and doctests are all supported.
#
# This is currently disabled by default, but it is planned for this
# to be opt-out in the future.
docstring-code-format = true

# Set the line length limit used when formatting code snippets in
# docstrings.
#
# This only has an effect when the `docstring-code-format` setting is
# enabled.
docstring-code-line-length = "dynamic"

[tool.pytest.ini_options]
testpaths = ["tests"]
addopts = "-ra"

[tool.pyright]
include = ["src"]
exclude = [
    "**/node_modules",
    "**/__pycache__",
]
venvPath = "."
venv = ".venv"

[tool.mypy]
files = ["src", "tests"]
python_executable = ".venv/bin/python"
check_untyped_defs = true       # Type-checks the interior of functions without type annotations.

[[tool.mypy.overrides]]
module = [
  "numpy.*",
  "scipy.*",
]
ignore_missing_imports = true

# Local Variables:
# jinx-local-words: "McCabe Pyflakes addopts backend bzr cov defs dev direnv doctests hatchling hg ini ipynb isort md mixedCase mypy nox numpy pycache pycodestyle pydocstyle pyenv pypackages pyright pytest pytype ra reBASICS reStructuredText rebasicspy rgx scipy src svn testpaths tomli tox unfixable untyped urls vcs venv venvPath vscode xdist zA"
# End:
